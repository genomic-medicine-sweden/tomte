nextflow_process {

    name "Test Process BOOTSTRAPANN"
    script "../main.nf"
    process "BOOTSTRAPANN"
    tag "modules_local"
    tag "modules"
    tag "bootstrapann"

    setup {

        run("GATK4_ASEREADCOUNTER") {
            script "../../../nf-core/gatk4/asereadcounter/main.nf"
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path +'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path +'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true),
                    file(params.modules_testdata_base_path +'genomics/sarscov2/illumina/vcf/test.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path +'genomics/sarscov2/illumina/vcf/test.vcf.gz.tbi', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'reference' ], // meta map
                    file(params.modules_testdata_base_path +'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                input[2] = [
                    [ id:'reference' ], // meta map
                    file(params.modules_testdata_base_path +'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
                ]
                input[3] = [
                    [ id:'reference' ], // meta map
                    file(params.modules_testdata_base_path +'genomics/sarscov2/genome/genome.dict', checkIfExists: true)
                ]
                input[4] = []
                """
            }
        }
    }

    test("Should run without failures") {

        when {
            params {
                modules_testdata_base_path = 'https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/'
            }
            process {
                """
                input[0] = Channel.of([
                    [ id:'test' ],
                    file(params.modules_testdata_base_path +'genomics/sarscov2/illumina/vcf/test.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path +'genomics/sarscov2/illumina/vcf/test.vcf.gz.tbi', checkIfExists: true)
                ]).join(GATK4_ASEREADCOUNTER.out.csv)
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
        }

    }

}
