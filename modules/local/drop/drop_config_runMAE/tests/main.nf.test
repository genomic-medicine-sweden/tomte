nextflow_process {

    name "Test Process DROP_CONFIG_RUN_MAE"
    script "../main.nf"
    process "DROP_CONFIG_RUN_MAE"
    config "./nextflow.config"
    tag "modules"
    tag "modules_local"
    tag "drop"
    tag "drop_config_runMAE"

    setup {
        run("GUNZIP", alias: "GUNZIP_FASTA") {
            script "../../../../../modules/nf-core/gunzip/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [ id:'fasta' ],
                    file("${projectDir}/test_data/grch37_chr21.fa.gz", checkIfExists: true)
                ])
                """
            }
        }

        run("SAMTOOLS_FAIDX") {
            script "../../../../../modules/nf-core/samtools/faidx/main.nf"
            process {
                """
                input[0] = GUNZIP_FASTA.out.gunzip
                input[1] = [[],[]]
                input[2] = []
                """
            }
        }

        run("GUNZIP", alias: "GUNZIP_GTF") {
            script "../../../../../modules/nf-core/gunzip/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [ id:'gtf' ],
                    file("${projectDir}/test_data/grch37_chr21.gtf.gz", checkIfExists: true)
                ])
                """
            }
        }

        run("DROP_SAMPLE_ANNOT") {
            script "../../../../../modules/local/drop/drop_sample_annot/main.nf"
            process {
                """
                input[0] = Channel.of([
                            ['ACC5963A1'], [false], ['reverse'], ['NA'], ["${projectDir}/test_data/test_ACC5963A1.vcf.gz"], ["${projectDir}/test_data/test_ACC5963A1.vcf.gz.tbi"],  ['ACC5963A1'],
                            file("${projectDir}/test_data/ACC5963A1.bam", checkIfExists: true),
                            file("${projectDir}/test_data/ACC5963A1.bam.bai", checkIfExists: true)
                        ])
                input[1] = channel.fromPath("${projectDir}/test_data/drop_data/geneCounts.tsv.gz", checkIfExists: true)
                input[2] = channel.fromPath("${projectDir}/test_data/drop_data/sampleAnnotation.tsv", checkIfExists: true)
                input[3] = 'outrider'
                input[4] = 'fraser'
                """
            }
        }

        run("GATK4_CREATESEQUENCEDICTIONARY", alias: "BUILD_DICT") {
        script "../../../../../modules/nf-core/gatk4/createsequencedictionary/main.nf"
        process {
            """
            input[0] = GUNZIP_FASTA.out.gunzip
            """
            }
        }

    }

    test("Should run without failures") {

        when {
            process {
                """
                input[0] = GUNZIP_FASTA.out.gunzip.join(SAMTOOLS_FAIDX.out.fai).collect()
                input[1] = GUNZIP_GTF.out.gunzip.collect()
                input[2] = BUILD_DICT.out.dict.collect()
                input[3] = DROP_SAMPLE_ANNOT.out.drop_annot
                input[4] = 'GRCh37'
                input[5] = Channel.of([
                        file("${projectDir}/test_data/ACC5963A1.bam", checkIfExists: true),
                        file("${projectDir}/test_data/ACC5963A1.bam.bai", checkIfExists: true)
                    ])
                input[6] = Channel.of([
                        file("${projectDir}/test_data/test_ACC5963A1.vcf.gz", checkIfExists: true),
                        file("${projectDir}/test_data/test_ACC5963A1.vcf.gz.tbi", checkIfExists: true)
                    ])
                input[7] = Channel.of([
                        file("${projectDir}/test_data/qc_vcf_1000G_hg19_chr21.vcf.gz", checkIfExists: true),
                        file("${projectDir}/test_data/qc_vcf_1000G_hg19_chr21.vcf.gz.tbi", checkIfExists: true)
                    ])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.config_drop.collect{ file(it).name },
                    process.out.drop_gene_name,
                    process.out.drop_mae_out.collect{ file(it).name },
                    process.out.drop_mae_tsv.collect{ file(it).name },
                    process.out.versions,
                ).match()}
            )
        }

    }

}
