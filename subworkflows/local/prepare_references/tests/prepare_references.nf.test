nextflow_workflow {

    name "Test Workflow PREPARE_REFERENCES"
    script "../main.nf"
    workflow "PREPARE_REFERENCES"
    config "./nextflow.config"
    tag "subworkflow"
    tag "prepare_references"

    test("Providing compressed references") {

        when {
            params {
                genome='GRCh37'
            }
            workflow {
                """
                input[0]  =  Channel.of([
                    [ id:'grch37_chr21'], file("${projectDir}/test_data/grch37_chr21.fa.gz", checkIfExists: true)
                    ])
                input[1]  =  Channel.empty()
                input[2]  =  Channel.empty()
                input[3]  =  Channel.of([
                    [ id:'grch37_chr21'], file("${projectDir}/test_data/grch37_chr21.gtf.gz", checkIfExists: true)
                    ])
                input[4]  =  Channel.of([
                    file('https://raw.githubusercontent.com/nf-core/test-datasets/raredisease/reference/vep_cache_and_plugins.tar.gz', checkIfExists: true)
                    ])
                input[5]  =  Channel.empty()
                input[6]  =  Channel.empty()
                input[7]  =  Channel.empty()
                input[8]  =  true
                input[9]  =  true
                input[10] =  false
                input[11] =  false
                input[12] =  false
                input[13] =  true
                input[14] =  true
                input[15] =  true
                input[16] =  true
                input[17] =  true
                input[18] =  true
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.versions,
                    workflow.out.chrom_sizes,
                    workflow.out.fasta_fai,
                    workflow.out.gtf,
                    workflow.out.sequence_dict,
                    workflow.out.refflat,
                    workflow.out.rrna_bed,
                    workflow.out.interval_list,
                    workflow.out.vep_cache,
                ).match() }
            )
        }

    }

    test("Providing uncompressed references") {

        setup {
            run("GUNZIP", alias: "GUNZIP_FASTA") {
                script "../../../../modules/nf-core/gunzip/main.nf"
                process {
                    """
                    input[0] = Channel.of([
                        [ id:'fasta' ],
                        file("${projectDir}/test_data/grch37_chr21.fa.gz", checkIfExists: true)
                    ])
                    """
                }
            }

            run("SAMTOOLS_FAIDX") {
                script "../../../../modules/nf-core/samtools/faidx/main.nf"
                process {
                    """
                    input[0] = GUNZIP_FASTA.out.gunzip
                    input[1] = [[],[]]
                    """
                }
            }

            run("GUNZIP", alias: "GUNZIP_GTF") {
                script "../../../../modules/nf-core/gunzip/main.nf"
                process {
                    """
                    input[0] = Channel.of([
                        [ id:'gtf' ],
                        file("${projectDir}/test_data/grch37_chr21.gtf.gz", checkIfExists: true)
                    ])
                    """
                }
            }

            run("GUNZIP", alias: "GUNZIP_TRANSCRIPT") {
                script "../../../../modules/nf-core/gunzip/main.nf"
                process {
                    """
                    input[0] = Channel.of([
                        [ id:'transcripts' ],
                        file("${projectDir}/test_data/grch37_chr21_transcripts.fa.gz", checkIfExists: true)
                    ])
                    """
                }
            }

            run("STAR_GENOMEGENERATE") {
                script "../../../../modules/nf-core/star/genomegenerate/main.nf"
                process {
                    """
                    input[0] = GUNZIP_FASTA.out.gunzip
                    input[1] = GUNZIP_GTF.out.gunzip
                    """
                }
            }

            run("SALMON_INDEX") {
                script "../../../../modules/nf-core/salmon/index/main.nf"
                process {
                    """
                    input[0] = GUNZIP_FASTA.out.gunzip
                        .map{ meta, fasta -> [ fasta ] }
                    input[1] = GUNZIP_TRANSCRIPT.out.gunzip
                        .map{ meta, transcript -> [ transcript ] }
                    """
                }
            }

            run("GATK4_CREATESEQUENCEDICTIONARY", alias: "BUILD_DICT") {
                script "../../../../modules/nf-core/gatk4/createsequencedictionary/main.nf"
                process {
                    """
                    input[0] = GUNZIP_FASTA.out.gunzip
                    """
                }
            }
        }

        when {
            params {
                genome='GRCh37'
            }
            workflow {
                """
                input[0] =  GUNZIP_FASTA.out.gunzip.collect()
                input[1] =  SAMTOOLS_FAIDX.out.fai.collect()
                input[2] =  STAR_GENOMEGENERATE.out.index
                input[3] =  GUNZIP_GTF.out.gunzip
                input[4] =  Channel.of([
                    file('https://raw.githubusercontent.com/nf-core/test-datasets/raredisease/reference/vep_cache_and_plugins.tar.gz', checkIfExists: true)
                    ])
                input[5] =  Channel.empty()
                input[6] =  SALMON_INDEX.out.index.collect()
                input[7] =  BUILD_DICT.out.dict.collect()
                input[8]  =  false
                input[9]  =  false
                input[10] =  false
                input[11] =  false
                input[12] =  false
                input[13] =  true
                input[14] =  false
                input[15] =  false
                input[16] =  true
                input[17] =  false
                input[18] =  false
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.versions,
                    workflow.out.chrom_sizes,
                    workflow.out.fasta_fai,
                    workflow.out.gtf,
                    workflow.out.sequence_dict,
                    workflow.out.refflat,
                    workflow.out.rrna_bed,
                    workflow.out.interval_list,
                    workflow.out.vep_cache,
                ).match() }
            )
        }

    }

}
