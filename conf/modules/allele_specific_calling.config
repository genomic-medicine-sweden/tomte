/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

//
// ALLELE_SPECIFIC_CALLING
//

process {
    withName: '.*ALLELE_SPECIFIC_CALLING.*' {
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*ALLELE_SPECIFIC_CALLING:BCFTOOLS_VIEW' {
        ext.prefix = { "${meta.id}_biallelic" }
        ext.args = { '--genotype het --max-alleles 2 --min-alleles 2 --types snps --output-type z' }
    }

    withName: '.*ALLELE_SPECIFIC_CALLING:BCFTOOLS_INDEX' {
        ext.args = { '--tbi' }
    }

    withName: '.*ALLELE_SPECIFIC_CALLING:BCFTOOLS_MERGE' {
        ext.args = '--output-type z'
        ext.prefix = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/bootstrapann" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ALLELE_SPECIFIC_CALLING:RENAME_FILES' {
        ext.prefix = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/bootstrapann" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ALLELE_SPECIFIC_CALLING:TABIX_TABIX' {
        publishDir = [
            path: { "${params.outdir}/bootstrapann" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}
