/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

//
// Alignment options
//

process {
    withName: '.*ALIGNMENT.*' {
        publishDir = [
            enabled: false,
        ]
    }

    withName: '.*ALIGNMENT:FASTP' {
        ext.args = { [
            params.min_trimmed_length ? "--length_required ${params.min_trimmed_length}" : '',
            '--correction',
            '--overrepresentation_analysis'
        ].join(' ').trim() }
        publishDir = [
            path: { "${params.outdir}/trimming" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ALIGNMENT:STAR_ALIGN' {
        ext.args = { [
            "--twopassMode ${params.star_two_pass_mode}",
            '--outReadsUnmapped None',
            '--outSAMtype BAM SortedByCoordinate',
            '--quantMode GeneCounts',
            '--outSAMstrandField intronMotif',
            '--peOverlapNbasesMin 10',
            '--peOverlapMMp 0.1',
            '--chimSegmentMin 12',
            '--chimJunctionOverhangMin 12',
            '--chimOutType WithinBAM',
            '--readFilesCommand gunzip -c',
            '--outWigType wiggle',
            '--outWigStrand Unstranded'
            ].join(' ') }
        publishDir = [
            path: { "${params.outdir}/alignment" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ALIGNMENT:SAMTOOLS_INDEX' {
        publishDir = [
            path: { "${params.outdir}/trimming" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ALIGNMENT:SAMTOOLS_VIEW' {
        ext.when = { params.save_mapped_as_cram }
        ext.args = { '--output-fmt cram --write-index' }
        publishDir = [
            path: { "${params.outdir}/alignment" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*ALIGNMENT:RNA_DOWNSAMPLE' {
        publishDir = [
            path: { "${params.outdir}/alignment" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ALIGNMENT:SALMON_QUANT' {
        ext.args = { [
            '--gcBias',
            '--validateMappings'
            ].join(' ') }
        publishDir = [
            path: { "${params.outdir}/alignment" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}
