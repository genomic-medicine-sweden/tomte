/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}

//
// Genome preparation options
//

process {
    withName: '.*PREPARE_REFERENCES:SAMTOOLS_FAIDX_GENOME' {
        ext.when = {!params.fasta_fai}
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference,
            pattern: "*fai"
        ]
        ext.args2 = " --no-same-owner "
    }

    withName: '.*PREPARE_REFERENCES:BUILD_DICT' {
        ext.when = {!params.sequence_dict}
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference,
            pattern: "*dict"
        ]
    }

    withName: '.*PREPARE_REFERENCES:UNTAR_STAR_INDEX' {
        ext.when = { params.star_index && params.star_index.endsWith(".gz") }
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: '.*PREPARE_REFERENCES:GUNZIP_GTF' {
        ext.when = { params.gtf && params.gtf.endsWith(".gz") }
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference,
            pattern: "*gtf"
        ]
    }
}

//
// Alignment options
//

process {
    withName: '.*ALIGNMENT:FASTP' {
        publishDir = [
            path: { "${params.outdir}/alignment" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.args = "--correction --overrepresentation_analysis "
    }

    withName: '.*ALIGNMENT:STAR_ALIGN' {
        publishDir = [
            path: { "${params.outdir}/alignment" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.args = [
            '--twopassMode Basic',
            '--outReadsUnmapped None',
            '--outSAMtype BAM SortedByCoordinate',
            '--quantMode GeneCounts',
            '--outSAMstrandField intronMotif',
            '--peOverlapNbasesMin 10',
            '--peOverlapMMp 0.1',
            '--chimSegmentMin 12',
            '--chimJunctionOverhangMin 12',
            '--chimOutType WithinBAM '
            ].join(' ')
    }
}
